<?xml version="1.0"?>
<project xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd" xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.alibaba</groupId>
    <artifactId>dubbo-parent</artifactId>
    <version>2.0.7</version>
  </parent>
  <artifactId>dubbo-cluster-myself</artifactId>
  <packaging>jar</packaging>
  <name>Dubbo Cluster Module</name>
  <description>The cluster module of dubbo project</description>
  <properties>
  <skip_maven_deploy>true</skip_maven_deploy>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <!-- compile - this is the default scope, used if none is specified. Compile dependencies are available in all classpaths. Furthermore, those dependencies are propagated to dependent projects.
provided - this is much like compile, but indicates you expect the JDK or a container to provide it at runtime. It is only available on the compilation and test classpath, and is not transitive.
runtime - this scope indicates that the dependency is not required for compilation, but is for execution. It is in the runtime and test classpaths, but not the compile classpath.
test - this scope indicates that the dependency is not required for normal use of the application, and is only available for the test compilation and execution phases. It is not transitive.
system - this scope is similar to provided except that you have to provide the JAR which contains it explicitly. The artifact is always available and is not looked up in a repository. -->
  <dependencies>
  	<dependency>
  		<groupId>com.alibaba</groupId>
  		<artifactId>dubbo-rpc-myself</artifactId>
  		<version>${project.parent.version}</version>
  	</dependency>
  	<dependency>
  		<groupId>org.apache.bsf</groupId>
  		<artifactId>bsf-api</artifactId>
  		<scope>provided</scope>
  		<optional>true</optional>
  	</dependency>
  </dependencies>
</project>
